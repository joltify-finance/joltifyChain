// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invoice/sell_order.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SellOrder struct {
	Creator      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	SellOrderID  string                                        `protobuf:"bytes,2,opt,name=sellOrderID,proto3" json:"sellOrderID,omitempty"`
	InvoiceID    string                                        `protobuf:"bytes,3,opt,name=invoiceID,proto3" json:"invoiceID,omitempty"`
	Amount       github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Price        github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,5,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price"`
	LeftAmount   github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,6,opt,name=leftAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"leftAmount"`
	PriceRatio   string                                        `protobuf:"bytes,7,opt,name=priceRatio,proto3" json:"priceRatio,omitempty"`
	SellDuration time.Duration                                 `protobuf:"bytes,8,opt,name=sellDuration,proto3,stdduration" json:"sellDuration"`
	CreatedTime  time.Time                                     `protobuf:"bytes,9,opt,name=createdTime,proto3,stdtime" json:"createdTime"`
	IsDeleted    bool                                          `protobuf:"varint,10,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (m *SellOrder) Reset()         { *m = SellOrder{} }
func (m *SellOrder) String() string { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()    {}
func (*SellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e0aaa1dd1e13b77, []int{0}
}
func (m *SellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrder.Merge(m, src)
}
func (m *SellOrder) XXX_Size() int {
	return m.Size()
}
func (m *SellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrder proto.InternalMessageInfo

func (m *SellOrder) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *SellOrder) GetSellOrderID() string {
	if m != nil {
		return m.SellOrderID
	}
	return ""
}

func (m *SellOrder) GetInvoiceID() string {
	if m != nil {
		return m.InvoiceID
	}
	return ""
}

func (m *SellOrder) GetPriceRatio() string {
	if m != nil {
		return m.PriceRatio
	}
	return ""
}

func (m *SellOrder) GetSellDuration() time.Duration {
	if m != nil {
		return m.SellDuration
	}
	return 0
}

func (m *SellOrder) GetCreatedTime() time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return time.Time{}
}

func (m *SellOrder) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func init() {
	proto.RegisterType((*SellOrder)(nil), "joltify.joltifychain.invoice.SellOrder")
}

func init() { proto.RegisterFile("invoice/sell_order.proto", fileDescriptor_3e0aaa1dd1e13b77) }

var fileDescriptor_3e0aaa1dd1e13b77 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x6b, 0xd8, 0xba, 0xd6, 0xdd, 0xc9, 0xe2, 0x60, 0xaa, 0x29, 0x89, 0x38, 0xa0, 0x5e,
	0x66, 0x0b, 0xf8, 0x04, 0xad, 0xa2, 0xa1, 0x0a, 0x09, 0xa4, 0xb0, 0x13, 0x17, 0x94, 0x26, 0xaf,
	0x99, 0xc1, 0x89, 0x2b, 0xdb, 0x41, 0xec, 0x5b, 0xec, 0xc8, 0x17, 0x42, 0xda, 0x71, 0x47, 0xc4,
	0xa1, 0xa0, 0xf6, 0x5b, 0x70, 0x42, 0x71, 0x1c, 0x2d, 0xc0, 0x05, 0xf5, 0x14, 0xeb, 0xf9, 0xfd,
	0x7f, 0xfa, 0xfb, 0xfd, 0x5f, 0x30, 0x15, 0xd5, 0x27, 0x25, 0x32, 0xe0, 0x06, 0xa4, 0x7c, 0xaf,
	0x74, 0x0e, 0x9a, 0x6d, 0xb4, 0xb2, 0x8a, 0x9c, 0x7d, 0x50, 0xd2, 0x8a, 0xf5, 0x35, 0xf3, 0xdf,
	0xec, 0x2a, 0x15, 0x15, 0xf3, 0xed, 0xd3, 0xa0, 0x50, 0xaa, 0x90, 0xc0, 0x5d, 0xef, 0xaa, 0x5e,
	0xf3, 0xbc, 0xd6, 0xa9, 0x15, 0xaa, 0x6a, 0xd5, 0xd3, 0xf0, 0xef, 0x7b, 0x2b, 0x4a, 0x30, 0x36,
	0x2d, 0x37, 0xbe, 0xe1, 0x51, 0xa1, 0x0a, 0xe5, 0x8e, 0xbc, 0x39, 0xb5, 0xd5, 0x27, 0x5f, 0x8f,
	0xf0, 0xf8, 0x2d, 0x48, 0xf9, 0xa6, 0x31, 0x42, 0x5e, 0xe1, 0x93, 0x4c, 0x43, 0x6a, 0x95, 0xa6,
	0x28, 0x42, 0xb3, 0xd3, 0xc5, 0xb3, 0x5f, 0xdb, 0xf0, 0xbc, 0x10, 0xf6, 0xaa, 0x5e, 0xb1, 0x4c,
	0x95, 0x3c, 0x53, 0xa6, 0x54, 0xc6, 0x7f, 0xce, 0x4d, 0xfe, 0x91, 0xdb, 0xeb, 0x0d, 0x18, 0x36,
	0xcf, 0xb2, 0x79, 0x9e, 0x6b, 0x30, 0x26, 0xe9, 0x08, 0x24, 0xc2, 0x13, 0xd3, 0x91, 0x97, 0x31,
	0x7d, 0x10, 0xa1, 0xd9, 0x38, 0xe9, 0x97, 0xc8, 0x19, 0x1e, 0xfb, 0xe7, 0x2d, 0x63, 0xfa, 0xd0,
	0xdd, 0xdf, 0x17, 0xc8, 0x05, 0x1e, 0xa6, 0xa5, 0xaa, 0x2b, 0x4b, 0x8f, 0x9c, 0x17, 0x76, 0xbb,
	0x0d, 0x07, 0xdf, 0xb7, 0xe1, 0xd3, 0xff, 0xf0, 0xb3, 0xac, 0x6c, 0xe2, 0xd5, 0x24, 0xc6, 0xc7,
	0x1b, 0x2d, 0x32, 0xa0, 0xc7, 0x07, 0x61, 0x5a, 0x31, 0x79, 0x8d, 0xb1, 0x84, 0xb5, 0x9d, 0xb7,
	0x8e, 0x86, 0x07, 0xa1, 0x7a, 0x04, 0x12, 0x60, 0xec, 0xc0, 0x49, 0x13, 0x22, 0x3d, 0x71, 0x8f,
	0xef, 0x55, 0xc8, 0x4b, 0x7c, 0xda, 0x8c, 0x2a, 0xf6, 0x29, 0xd3, 0x51, 0x84, 0x66, 0x93, 0xe7,
	0x8f, 0x59, 0x1b, 0x33, 0xeb, 0x62, 0x66, 0x5d, 0xc3, 0x62, 0xd4, 0x98, 0xf9, 0xf2, 0x23, 0x44,
	0xc9, 0x1f, 0x42, 0x72, 0x81, 0x27, 0x2e, 0x11, 0xc8, 0x2f, 0x45, 0x09, 0x74, 0xec, 0x38, 0xd3,
	0x7f, 0x38, 0x97, 0xdd, 0xba, 0xb4, 0xa0, 0x9b, 0x06, 0xd4, 0x17, 0xba, 0xb0, 0x4c, 0x0c, 0x12,
	0x2c, 0xe4, 0x14, 0x47, 0x68, 0x36, 0x4a, 0xee, 0x0b, 0x8b, 0xe5, 0xed, 0x2e, 0x40, 0x77, 0xbb,
	0x00, 0xfd, 0xdc, 0x05, 0xe8, 0x66, 0x1f, 0x0c, 0xee, 0xf6, 0xc1, 0xe0, 0xdb, 0x3e, 0x18, 0xbc,
	0xe3, 0x85, 0xb0, 0x32, 0x6d, 0x87, 0xe3, 0x37, 0x9b, 0xf7, 0x37, 0x9c, 0x7f, 0xe6, 0xdd, 0x2f,
	0xe1, 0x26, 0xb5, 0x1a, 0x3a, 0x4f, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xed, 0xb3, 0x09,
	0x40, 0x2a, 0x03, 0x00, 0x00,
}

func (m *SellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSellOrder(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.SellDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.SellDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSellOrder(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if len(m.PriceRatio) > 0 {
		i -= len(m.PriceRatio)
		copy(dAtA[i:], m.PriceRatio)
		i = encodeVarintSellOrder(dAtA, i, uint64(len(m.PriceRatio)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.LeftAmount.Size()
		i -= size
		if _, err := m.LeftAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSellOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSellOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSellOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.InvoiceID) > 0 {
		i -= len(m.InvoiceID)
		copy(dAtA[i:], m.InvoiceID)
		i = encodeVarintSellOrder(dAtA, i, uint64(len(m.InvoiceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SellOrderID) > 0 {
		i -= len(m.SellOrderID)
		copy(dAtA[i:], m.SellOrderID)
		i = encodeVarintSellOrder(dAtA, i, uint64(len(m.SellOrderID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSellOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSellOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovSellOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSellOrder(uint64(l))
	}
	l = len(m.SellOrderID)
	if l > 0 {
		n += 1 + l + sovSellOrder(uint64(l))
	}
	l = len(m.InvoiceID)
	if l > 0 {
		n += 1 + l + sovSellOrder(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovSellOrder(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovSellOrder(uint64(l))
	l = m.LeftAmount.Size()
	n += 1 + l + sovSellOrder(uint64(l))
	l = len(m.PriceRatio)
	if l > 0 {
		n += 1 + l + sovSellOrder(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.SellDuration)
	n += 1 + l + sovSellOrder(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime)
	n += 1 + l + sovSellOrder(uint64(l))
	if m.IsDeleted {
		n += 2
	}
	return n
}

func sovSellOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSellOrder(x uint64) (n int) {
	return sovSellOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeftAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.SellDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSellOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSellOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSellOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSellOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSellOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSellOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSellOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSellOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSellOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSellOrder = fmt.Errorf("proto: unexpected end of group")
)
